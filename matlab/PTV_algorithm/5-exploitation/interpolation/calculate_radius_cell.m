% INPUT: 
% set = a set of images
% data = the array containing the data for the detection of blobs (see
% parameters_tracking)
% data_mask = the array containing the data for building a mask to detect
% particles at the interior wall of the cylinder
% data_perspective = the array containing data for correcting perspective
% effects; see parameters_tracking. Note the perspective effects are
% corrected only if the corresponding code in uncommented (see in the code
% below). The correction of perspective effects is not necessary to obtain
% good results.
%
% This function detects, for each image of the set, the particles at the
% interior wall (thanks to data_mask) of the cylinder. For each image of the 
% set, it converts the 2D positions into 3D real positions using 
% data_perspective (this step is optionnal). Then it uses the new real 
% positions of the detected particles in order to build an interior circle 
% based on least-square interpolation. Then the function averages all the 
% interiors circles computed in order to obtain an interior mean_circle. 
%
%OUTPUTs: 
% all_circles = matrix containinig all the circles computed thanks to every
%               detected particles on every images. From the image i, the 
%               function detects all the particles at the inner wall and 
%               computes a circle stocked in result(i,:).
%               result(i,:) = [centerXi centerYi radius_i]
% result = [interior_centerX interior_centerY interior_radius]
%          It is the mean circle of all the circles stocked in all_circles 
% deltaX = standard-deviation of the centerX coordinate 
% deltaY = standard-deviation of the centerY coordinate
% deltaR = standard-deviation of the radius 

function [all_circles, result,deltaX,deltaY,deltaR] = calculate_radius_cell(set, data, data_mask, data_perspective)

circle_interior = []; %contient tous les cercles interieurs calculés pour chaque image
circle_interior_mean = []; %contient la moyenne de circle_interior

%Computing circle_interior_min
for i=1:set.Count
    array = keep_shearing_band(detect_particles(set, i, data, 0), data_mask);
    
    %-OPTIONNAL------------------------------------------------------------
    %CORRECTING PERSPECTIVE BY COMPUTING A WHOLE NEW SET OF 3D-POSITIONS---
    %array2 = uv2XYZ(array, data_perspective, set);
    %----------------------------------------------------------------------
    
    circle_interior(i,:) = interpolate_traj(array); %or array2 if the perspective is corrected
end

all_circles = circle_interior;
circle_interior_mean(1,:) = mean(circle_interior(:,:));

deltaX = std(circle_interior(:,1));
deltaY = std(circle_interior(:,2));
deltaR = std(circle_interior(:,3));
result = [circle_interior_mean];

end