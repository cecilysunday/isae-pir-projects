% INPUTs:
% set = a set of images
% data_mask = data to build a rectangular mask
% data = data used to perform the detection of particles
% theta = angle of projection (angle of the camera)
% pixel_scale
% zero = the value (in pixel) corresponding to height = 0

% For each image of the set, this function detects the particles light by
% the laser line which are under the mask
%
% OUTPUTs
% result = a structure containing, for each image of the set, the array of
% the positions of all the detetected particles under the mask. The 
% coordinates of the particles are corrected using the projection angle, 
% the zero value and the pixel_scale. This output is the most important and 
% can be plotted using the display_laser_profile function
% 
% result2 = a structure containing, for each image of the set, the array of
% the positions of all the detetected particles under the mask. The 
% coordinates of the particles are not corrected, so they are in pixel and
% without perspective correction

function [result,result2] = build_profil(set, data_mask, data, theta, pixel_scale, zero)

for i=1:set.Count
    
    name = ['pict_', num2str(i)];
    
    array = detect_particles(set, i, data, 0);
    part_in_mask = check_rectangular_mask(data_mask,array);
    result2.(name) = part_in_mask;
    
    sz = size(part_in_mask);
    part_in_mask(:,2) = part_in_mask(:,2) - zero*ones(sz(1),1);
    part_in_mask(:,2) = - part_in_mask(:,2); 
    array_proj = [(part_in_mask(:,1)-data_mask(1,1))/(data_mask(1,3)/95)+100,(cos(theta)/pixel_scale)*part_in_mask(:,2)];
    %array_proj = [(part_in_mask(:,1)-data_mask(1,1))/(data_mask(1,3)/95)+100,(cos(theta)/1)*part_in_mask(:,2)];
    result.(name) = array_proj;
      
end

end