% This function compute an average profil by averaging all the profiles of
% surfzce obtained between frame 'start' and frame 'finish'
%
% INPUTs:
% data_profil = the first output of the function: build_profil
% start: first frame
% finish: last frame
% 
% OUTPUT:
% result = an array containing the coordinates of the mean profile computed

function result = compute_average_profile(data_profil, start, finish)

name = ['pict_', num2str(1)];
sz = size(data_profil.(name));

for i = 1:sz(1)
    index= 1;
    valeur2 = [];
    for j = start:finish
        
        %parcours des images
        name = ['pict_', num2str(j)];
        
        %Vecteur contenant la coordonée y sur toutes les frames pour un x
        %donné
        valeur(j,1) = data_profil.(name)(i,2);
        
        %Vecteur contenant la coordonée y sur toutes les frames pour un x
        %donné, lorsque cette coord est diff de NaN
        if valeur(j,1) <50 && valeur(j,1) > -50
            valeur2(index,1) = valeur(j,1);
            index = index+1;
        end
        
    end
    
    array = data_profil.(name);
    mean_prof(i,1) = array(i,1);
%     valeur2
%     sz = size(valeur2);
%     if sz(1) > 0
%         mean_prof(i,2) = mean(valeur2);
%     end
    mean_prof(i,2) = mean(valeur2);
end

result = mean_prof;

end

% for i=1:set.Count
%     
%     name = ['pict_', num2str(i)];
%     
%     array = detect_particles(set, i, data, 0);
%     part_in_mask = check_rectangular_mask(data_mask,array);
%     result2.(name) = part_in_mask;
%     
%     sz = size(part_in_mask);
%     part_in_mask(:,2) = part_in_mask(:,2) - zero*ones(sz(1),1);
%     part_in_mask(:,2) = - part_in_mask(:,2); 
%     array_proj = [(((part_in_mask(:,1)-data_mask(1,1))/(data_mask(1,3)/95)+100)-100)/4,(cos(theta)/pixel_scale)*part_in_mask(:,2)];
%     array_proj2(:,1) = 0:0.5:24;
%     array_proj2(:,2) = interp1(array_proj(:,1), array_proj(:,2), 0:0.5:24);
%     result.(name) = array_proj2;
% end
% 
% 
% end

