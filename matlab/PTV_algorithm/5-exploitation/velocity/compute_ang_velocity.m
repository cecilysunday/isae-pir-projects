% INPUTS
% all_tr = a set of trajectories 
% all_circles = a set of circles containing at least all the circles 
% associated to the interpolation of each trajectory of all_tr
% TIMESTEP = the timestep between 2 successive frames 
% SKIPSTEP = see the documentation of exploitation\velocity\get_data_omega_skipstep
%
% This function computes angular velocities assuming that for each
% trajectory of all_tr, the particle associated follows exactly the circle
% associated to the interpolation of its trajectory. So for each trajectory
% of all_tr, several angular velocities are computed on several frames. 
%
% OUTPUT 
% a matrix 'result' containing: 
% result(:,1) = a set of angular velocities 
% result(i,2) = the ID of the trajectory used to compute the angular
% velocity stocked in result(i,1)
% Note that one trajectory provide several angular velocities because of
% the parameter SKIPSTEP. In fact, for a given trajectory, an angular
% velocity will be computed between frame 1 and 1+SKIPSTEP, and then
% between frame 2 and 2+SKIPSTEP,ect...

function result = compute_ang_velocity(all_tr, all_circles, TIMESTEP, SKIPSTEP)

all_tr = sortrows(all_tr,4);
all_circles = sortrows(all_circles,4);

sz = size(all_tr);
last_ID = all_tr(sz(1),4);
tr_ID = all_tr(1,4);

begin = 1;
last = 1;
index = 1;
index2 = 1;

while tr_ID <= last_ID
    
    while last <= sz(1) && all_tr(last,4) == tr_ID
        last = last + 1;
    end
    
    last = last - 1;
    tr = all_tr(begin:last,:);
    %Recherche du cercle correspondant dans all_circles
    circle_ID = all_circles(index,4);
    while (circle_ID ~= tr_ID)
        index = index +1;
        circle_ID = all_circles(index,4);
    end
    X = all_circles(index,1);
    Y = all_circles(index,2);
    R = all_circles(index,3);
    
    tr = compute_velocity(tr, TIMESTEP, X, Y, SKIPSTEP);
    v_ang = tr(:,6)./R;
    v_ang_moy = mean(v_ang);
    
    %Stockage des résultats dans result 
    sz2 = size(v_ang);
    result(index2:index2+sz2(1)-1,1) = v_ang;
    result(index2:index2+sz2(1)-1,2) = tr_ID;
    
    if tr_ID ~= last_ID
        begin = last+1;
        last = last+1;
        tr_ID = all_tr(begin,4);
        index = index +1;
        index2 = index2 +sz2(1);
    end
    if tr_ID == last_ID
        tr_ID = tr_ID +1;
    end
    
end